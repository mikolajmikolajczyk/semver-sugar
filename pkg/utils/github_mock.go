// Code generated by MockGen. DO NOT EDIT.
// Source: github_interface.go

// Package utils is a generated GoMock package.
package utils

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v65/github"
)

// MockGithubActionIface is a mock of GithubActionIface interface.
type MockGithubActionIface struct {
	ctrl     *gomock.Controller
	recorder *MockGithubActionIfaceMockRecorder
}

// MockGithubActionIfaceMockRecorder is the mock recorder for MockGithubActionIface.
type MockGithubActionIfaceMockRecorder struct {
	mock *MockGithubActionIface
}

// NewMockGithubActionIface creates a new mock instance.
func NewMockGithubActionIface(ctrl *gomock.Controller) *MockGithubActionIface {
	mock := &MockGithubActionIface{ctrl: ctrl}
	mock.recorder = &MockGithubActionIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithubActionIface) EXPECT() *MockGithubActionIfaceMockRecorder {
	return m.recorder
}

// CreateGithubRelease mocks base method.
func (m *MockGithubActionIface) CreateGithubRelease(version, target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGithubRelease", version, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGithubRelease indicates an expected call of CreateGithubRelease.
func (mr *MockGithubActionIfaceMockRecorder) CreateGithubRelease(version, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGithubRelease", reflect.TypeOf((*MockGithubActionIface)(nil).CreateGithubRelease), version, target)
}

// CreateGithubTag mocks base method.
func (m *MockGithubActionIface) CreateGithubTag(version, target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGithubTag", version, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGithubTag indicates an expected call of CreateGithubTag.
func (mr *MockGithubActionIfaceMockRecorder) CreateGithubTag(version, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGithubTag", reflect.TypeOf((*MockGithubActionIface)(nil).CreateGithubTag), version, target)
}

// DoesLabelExist mocks base method.
func (m *MockGithubActionIface) DoesLabelExist(label, eventPath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesLabelExist", label, eventPath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesLabelExist indicates an expected call of DoesLabelExist.
func (mr *MockGithubActionIfaceMockRecorder) DoesLabelExist(label, eventPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesLabelExist", reflect.TypeOf((*MockGithubActionIface)(nil).DoesLabelExist), label, eventPath)
}

// GenerateReleaseNotes mocks base method.
func (m *MockGithubActionIface) GenerateReleaseNotes(version, lastTag string) (*github.RepositoryReleaseNotes, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateReleaseNotes", version, lastTag)
	ret0, _ := ret[0].(*github.RepositoryReleaseNotes)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateReleaseNotes indicates an expected call of GenerateReleaseNotes.
func (mr *MockGithubActionIfaceMockRecorder) GenerateReleaseNotes(version, lastTag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateReleaseNotes", reflect.TypeOf((*MockGithubActionIface)(nil).GenerateReleaseNotes), version, lastTag)
}

// GetGithubLatestTag mocks base method.
func (m *MockGithubActionIface) GetGithubLatestTag(versionRange string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGithubLatestTag", versionRange)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGithubLatestTag indicates an expected call of GetGithubLatestTag.
func (mr *MockGithubActionIfaceMockRecorder) GetGithubLatestTag(versionRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGithubLatestTag", reflect.TypeOf((*MockGithubActionIface)(nil).GetGithubLatestTag), versionRange)
}

// GetIncrementType mocks base method.
func (m *MockGithubActionIface) GetIncrementType(eventPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncrementType", eventPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncrementType indicates an expected call of GetIncrementType.
func (mr *MockGithubActionIfaceMockRecorder) GetIncrementType(eventPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncrementType", reflect.TypeOf((*MockGithubActionIface)(nil).GetIncrementType), eventPath)
}

// GetNextTag mocks base method.
func (m *MockGithubActionIface) GetNextTag(currentVersion, increment, format string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextTag", currentVersion, increment, format)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextTag indicates an expected call of GetNextTag.
func (mr *MockGithubActionIfaceMockRecorder) GetNextTag(currentVersion, increment, format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextTag", reflect.TypeOf((*MockGithubActionIface)(nil).GetNextTag), currentVersion, increment, format)
}

// ParseGithubEvent mocks base method.
func (m *MockGithubActionIface) ParseGithubEvent(filePath string) (*github.PullRequestEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGithubEvent", filePath)
	ret0, _ := ret[0].(*github.PullRequestEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseGithubEvent indicates an expected call of ParseGithubEvent.
func (mr *MockGithubActionIfaceMockRecorder) ParseGithubEvent(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGithubEvent", reflect.TypeOf((*MockGithubActionIface)(nil).ParseGithubEvent), filePath)
}
